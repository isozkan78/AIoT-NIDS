#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/a9664780-c33d-468a-a5f2-828c23cea2fd 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float distance;
  int packetSize;
  int prediction;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include "model.h"
#include <esp_wifi.h>
#include <PubSubClient.h>

#define TRIG_PIN 5
#define ECHO_PIN 18
#define LED_PIN 2
#define BUTTON_PIN 4

const char* ssid = "...";
const char* password = "1234567890";
const char* mqtt_server = "broker.hivemq.com";

WiFiClient espClient;
PubSubClient client(espClient);

bool simulateAnomaly = false;

void setup_wifi() {
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  delay(100);
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi Bağlandı!");
}

void mqttReconnect() {
  while (!client.connected()) {
    Serial.print("MQTT bağlanıyor...");
    if (client.connect("ESP32Client")) {
      Serial.println("BAĞLANDI!");
    } else {
      Serial.print("Bağlantı HATASI. Kod: ");
      Serial.println(client.state());
      delay(2000);
    }
  }
}

void sendAlert(const char* msg) {
  if (!client.connected()) mqttReconnect();
  client.loop();
  client.publish("aiot-nids/alert", msg);
  Serial.println("MQTT Uyarı Gönderildi: ");
  Serial.println(msg);
}

long readDistanceCM() {
  digitalWrite(TRIG_PIN, LOW); delayMicroseconds(2);
  digitalWrite(TRIG_PIN, HIGH); delayMicroseconds(10);
  digitalWrite(TRIG_PIN, LOW);
  long duration = pulseIn(ECHO_PIN, HIGH);
  return duration * 0.034 / 2;
}



void packetSniffer(void *buf, wifi_promiscuous_pkt_type_t type) {
  wifi_promiscuous_pkt_t *pkt = (wifi_promiscuous_pkt_t *)buf;
  packetSize = pkt->rx_ctrl.sig_len;
}


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

  pinMode(LED_PIN, OUTPUT);
  pinMode(TRIG_PIN, OUTPUT);
  pinMode(ECHO_PIN, INPUT);
  pinMode(BUTTON_PIN, INPUT_PULLUP);

  setup_wifi();
  client.setServer(mqtt_server, 1883);

  WiFi.mode(WIFI_STA);
  esp_wifi_set_promiscuous(true);
  esp_wifi_set_promiscuous_rx_cb(&packetSniffer);

}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  distance = readDistanceCM();
  bool proximity = distance < 30 && distance >= 1;

  // Buton ile manuel anomaly simülasyonu
  
  if (digitalRead(BUTTON_PIN) == LOW) {
    Serial.println("Butona basıldı! Yapay anomali tetiklendi.");
    packetSize = 12000; // yapay büyük paket
  }

  float features[] = { (float)packetSize };
  prediction = clf.predict(features);

  Serial.print("packetSize: ");
  Serial.print(packetSize);
  Serial.print("  prediction: ");
  Serial.println(prediction);

  if ((proximity)) {
    digitalWrite(LED_PIN, HIGH);
    sendAlert("AIoT-NIDS: Tehdit Algılandı! Yakınlık Tehdidi");
  }
  else if(prediction == ANOMALY){
    digitalWrite(LED_PIN, HIGH);
    sendAlert("AIoT-NIDS: Tehdit Algılandı! Network Anomaly");

  } 
  else {
    digitalWrite(LED_PIN, LOW);
  }

  
}




